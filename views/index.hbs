<div class="dropdown mainContent mx-auto mt-5">
  <a class="btn btn-light fs-5 dropdown-toggle d-flex justify-content-between align-items-center fw-bold" href="#"
    role="button" id="categoryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
    類別
  </a>

  <ul class="dropdown-menu w-100" aria-labelledby="categoryDropdown" id="categoryList"
    onclick="displaySpecRecords(event)">
    <li><button class="dropdown-item categoryBtn fs-5" type="button" data-category-id="-1"
        data-category-name="總覽">總覽</button></li>
    {{#each categories as |category|}}
    <li>
      <button class="dropdown-item categoryBtn fs-5" type="button" data-category-id="{{category.id}}"
        data-category-name="{{category.name}}">
        <i class="{{category.icon}} ignoreClick"></i>
        <span class="ms-3 ignoreClick">{{category.name}}</span>
      </button>
    </li>
    {{/each}}
  </ul>
</div>

<div class="row mainContent mx-auto mt-4" style="position: relative;">
  <div class="d-flex align-items-start" style="position: absolute; top: 0; left: 0;">
    <div class="text-center fs-5">總金額 : </div>
  </div>
  <div class="text-end" style="font-size:72px;color: orangered;" id="totalAmount">0</div>
</div>

<div class="w-100 mt-3" style="position: relative;">
  <div class="mainContent mx-auto shadow bg-body rounded" id="virtualScrollArea" style="overflow: auto;">
    <div id="recordsContainer" style="overflow:hidden;">
      <div id="displayArea"></div>
    </div>
  </div>
  <div class="recordHandler d-flex flex-column"></div>
</div>

<div class="mx-auto mt-5 mb-3" style="width: 30%;">
  <a href="/records/new" class="w-100 btn btn-warning">新增支出</a>
</div>

{{> message}}

<script>
  const oriRecords = JSON.parse('{{{toJsonStr records}}}');
  const recordCount = Number('{{{count}}}');
  const scrollToRec = parseInt('{{{scrollTo}}}');
  let records = oriRecords;
  let curCategory = '總覽';
  const totalAmountEle = document.getElementById('totalAmount');

  function updateRecords() {
    cssTricks.animateNumber(totalAmountEle, records.reduce((sum, record) => sum + record.amount, 0), 1000);
    document.querySelector('.recordHandler').innerHTML = Array.from({ length: 5 }, (_, index) => index).reduce((html, index) => (
      html + '<div class="btnField" style="height:20%">'
      + `${index < records.length
        ? `
            <a href="/records/${records[index].id}/edit" class="btn btn-primary" id="edit-btn-${index}"></a>
            <form action="/records/${records[index].id}?_method=DELETE" method="post" style="display:inline-block;" id="deleteForm${index}"
              data-record-info="[${records[index].date}] ${records[index].name} \$${records[index].amount}"  onsubmit="handleDeleteReq(event)">
              <button type="submit" class="btn btn-danger""></button>
            </form>
          `
        : ''
      }`
      + '</div>'
    ), '');
    virtualScroll.handleVirtualScroll(records);
  }

  function displaySpecRecords(event) {
    if (event.target.matches('.categoryBtn')) {
      const reqCategoryName = event.target.dataset.categoryName;
      const reqCategoryId = Number(event.target.dataset.categoryId);

      document.getElementById('categoryDropdown').textContent = reqCategoryName;
      if (curCategory !== reqCategoryName) {
        records = reqCategoryId === -1
          ? oriRecords : oriRecords.filter((record) => record.categoryId === reqCategoryId);
        updateRecords();
      }
      curCategory = reqCategoryName;
    }
  }

  function handleDeleteReq(event) {
    event.preventDefault();
    if (window.confirm(`確定要刪出該筆支出 "${event.target.dataset.recordInfo}"?`)) {
      event.target.submit();
    }
  }

  updateRecords();

  if (!isNaN(scrollToRec)) {
    const scrollDist = (recordCount - scrollToRec) * 100;
    document.getElementById('virtualScrollArea').scrollTop = scrollDist;
  }
</script>