<div class="mainContent mx-auto mt-5 d-flex flex-row">
  <div class="dropdown flex-fill">
    <a class="btn btn-light fs-5 dropdown-toggle d-flex justify-content-between align-items-center fw-bold" href="#"
      role="button" id="categoryDropdown" data-bs-toggle="dropdown" aria-expanded="false">
      當前類別: 總覽
    </a>

    <ul class="dropdown-menu w-100" aria-labelledby="categoryDropdown" id="categoryList"
      onclick="listRecordByCategory(event)">
      <li><button class="dropdown-item categoryBtn fs-5" type="button" data-category-id="-1"
          data-category-name="總覽">總覽</button></li>
      {{#each categories as |category|}}
      <li>
        <button class="dropdown-item categoryBtn fs-5" type="button" data-category-id="{{category.id}}"
          data-category-name="{{category.name}}">
          <i class="{{category.icon}} ignoreClick"></i>
          <span class="ms-3 ignoreClick">{{category.name}}</span>
        </button>
      </li>
      {{/each}}
    </ul>
  </div>
  <div class="btn-group" role="group">
    <button type="button" class="btn btn-primary" data-bs-toggle="offcanvas" data-bs-target="#filterOffcanvas"
      aria-controls="filterOffcanvas" title="資料篩選">
      <i class="fas fa-filter"></i>
    </button>
    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#chartModal" title="統計圖表">
      <i class="fas fa-chart-line"></i>
    </button>
  </div>
</div>

<div class="row mainContent mx-auto mt-4" style="position: relative;">
  <div class="d-flex align-items-start" style="position: absolute; top: 0; left: 0;">
    <div class="text-center fs-5">總金額 : </div>
  </div>
  <div class="text-end" style="font-size:72px;color: orangered;" id="totalAmount">0</div>
</div>

<div class="w-100 mt-3" style="position: relative;">
  <div class="mainContent mx-auto shadow bg-body rounded" id="virtualScrollArea" style="overflow: auto;"></div>
</div>

<div class="mx-auto mt-5 mb-3" style="width: 30%;">
  <a href="/records/new" class="w-100 btn btn-warning">新增支出</a>
</div>

<div class="offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="filterOffcanvas"
  aria-labelledby="filterOffcanvasLabel" style="top: 58px;">
  <div class="offcanvas-header">
    <h4 class="offcanvas-title" id="filterOffcanvasLabel">篩選當前類別資料</h4>
    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    <div class="input-group mb-3">
      <span class="input-group-text fs-5 fw-bold" id="filterInputLabel">關鍵字詞</span>
      <input type="text" class="form-control fs-5" aria-describedby="filterInputLabel" id="keyword">
    </div>
    <div class="input-group mb-3">
      <span class="input-group-text fs-5 fw-bold" id="startTimeLabel">起始時間</span>
      <input type="date" class="form-control fs-5" style="cursor: pointer;" id="startTime" onfocus="this.showPicker()"
        onchange="setEndTimeLimit(event)" onkeydown="return false">
    </div>
    <div class="input-group mb-3">
      <span class="input-group-text fs-5 fw-bold" id="endTimeLabel">結束時間</span>
      <input type="date" class="form-control fs-5" style="cursor: pointer;" id="endTime" onfocus="this.showPicker()"
        disabled onkeydown="return false">
    </div>
    <div class="input-group mb-5">
      <label class="input-group-text fs-5 fw-bold" for="sortByObj">排序對象</label>
      <select class="form-select fs-5" id="sortByObj">
        <option selected value="" disabled>Choose...</option>
        <option value="name">支出名稱</option>
        <option value="date">記錄日期</option>
        <option value="categoryId">支出類別</option>
        <option value="amount">支出金額</option>
      </select>
    </div>
    <div class="mt-5 d-flex justify-content-end">
      <button type="button" class="btn btn-secondary" onclick="initFilterAndSort()">清除設定</button>
      <button type="button" class="btn btn-primary ms-3" onclick="processFilter()">篩選資料</button>
    </div>
  </div>
</div>

<div class="modal fade" id="chartModal" tabindex="-1" aria-labelledby="chartModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-fullscreen modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title fw-bold" id="chartModalLabel">當前記錄統計圖表</h4>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body px-5 d-flex flex-row justify-content-between align-items-center flex-wrap">
        <div class="chartContainer" id="amountInCategory"></div>
        <div class="chartContainer" id="dailyAmount"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
      </div>
    </div>
  </div>
</div>
{{> message}}

<script>
  const oriRecords = JSON.parse('{{{toJsonStr records}}}');
  const categories = JSON.parse('{{{toJsonStr categories}}}');
  const recordCount = Number('{{{count}}}');
  const scrollToRec = parseInt('{{{scrollTo}}}');

  let curRecords = oriRecords;
  let preRecords = oriRecords;
  let curCategory = '總覽';
  const totalAmountEle = document.getElementById('totalAmount');
  const vsHandler = new virtualScroll.VShandler({ items: oriRecords, virtualScrollAreaId: 'virtualScrollArea' });
  const curDateStr = tools.getFormatDateStr(new Date());
  const keywordEle = document.getElementById('keyword');
  const startTimeEle = document.getElementById('startTime');
  const endTimeEle = document.getElementById('endTime');
  const sortObjEle = document.getElementById('sortByObj');
  let dailyAmountChart = null;
  let amountInCategoryChart = null;

  function refreshChart() {
    if (dailyAmountChart) dailyAmountChart.destroy();
    if (amountInCategoryChart) amountInCategoryChart.destroy();
    dailyAmountChart = c3.generate(chartTools.getLineChartCfg(curRecords, 'dailyAmount'));
    amountInCategoryChart = c3.generate(chartTools.getPieChartCfg(curRecords, categories, 'amountInCategory'))
  }

  function handleRecordsChange() {
    cssTricks.animateNumber(totalAmountEle, curRecords.reduce((sum, record) => sum + record.amount, 0), 1000);
    vsHandler.handleScrollContentChange(curRecords);
    refreshChart();
  }

  function listRecordByCategory(event) {
    if (event.target.matches('.categoryBtn')) {
      const reqCategoryName = event.target.dataset.categoryName;
      const reqCategoryId = Number(event.target.dataset.categoryId);

      document.getElementById('categoryDropdown').textContent = `當前類別: ${reqCategoryName}`;
      if (curCategory !== reqCategoryName) {
        curRecords = reqCategoryId === -1
          ? oriRecords : oriRecords.filter((record) => record.categoryId === reqCategoryId);
        preRecords = curRecords;
        handleRecordsChange();
      }
      curCategory = reqCategoryName;
    }
  }

  function handleDeleteReq(event) {
    event.preventDefault();
    if (window.confirm(`確定要刪出該筆支出 "${event.target.dataset.recordInfo}"?`)) {
      event.target.submit();
    }
  }

  function setEndTimeLimit(event) {
    const startTime = event.target.value;
    endTimeEle.value = '';

    if (startTime) {
      endTimeEle.removeAttribute('disabled');
      if (startTime === curDateStr) endTimeEle.value = curDateStr;
      endTimeEle.setAttribute('min', event.target.value);
    } else {
      endTimeEle.setAttribute('disabled', true);
    }
  }

  function filterByKeywords(records) {
    const keyword = keywordEle.value;

    if (keyword === '') return records;
    else {
      return records.filter((record) => (
        record.name.includes(keyword) || record.date.includes(keyword) || record.amount.toString().includes(keyword)
      ));
    }
  }

  function filterByPeriod(records) {
    const startTimeStr = startTimeEle.value;
    const endTimeStr = endTimeEle.value;

    if (startTimeStr === '' || endTimeStr === '') return records;
    else {
      const dateList = [];
      const endTime = new Date(endTimeStr).getTime();

      for (let curDate = new Date(startTimeStr); curDate.getTime() <= endTime; curDate.setDate(curDate.getDate() + 1)) {
        dateList.push(tools.getFormatDateStr(curDate));
      }
      return records.filter((record) => dateList.includes(record.date));
    }
  }

  function sortRecords(records) {
    const sortObj = sortObjEle.value;

    switch (sortObj) {
      case 'name':
      case 'date':
        records.sort((a, b) => b[sortObj].localeCompare(a[sortObj]));
        break;
      case 'categoryId':
      case 'amount':
        records.sort((a, b) => b[sortObj] - a[sortObj]);
        break;
      default:
    }
  }

  function processFilter() {
    curRecords = filterByKeywords(preRecords.slice());
    curRecords = filterByPeriod(curRecords);
    sortRecords(curRecords);
    handleRecordsChange();
  }

  function initFilterAndSort() {
    keywordEle.value = '';
    startTimeEle.value = '';
    endTimeEle.value = '';
    sortObjEle.value = '';
    curRecords = preRecords;
    handleRecordsChange();
  }

  startTimeEle.setAttribute('max', curDateStr);
  endTimeEle.setAttribute('max', curDateStr);
  handleRecordsChange();
  if (!isNaN(scrollToRec)) {
    const scrollDist = (recordCount - scrollToRec) * 100;
    document.getElementById('virtualScrollArea').scrollTop = scrollDist;
  }
</script>